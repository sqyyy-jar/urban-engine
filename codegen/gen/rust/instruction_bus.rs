// This file is automatically generated.
// It is not intended for manual editing.

//! This module contains an instruction bus trait for ISA version `1.1.0-pre`.

use crate::opcodes::*;

pub trait InstructionBus {
    /// `add Xdst Xlhs u17`
    fn l0_add(&mut self, insn: u32);

    /// `sub Xdst Xlhs u17`
    fn l0_sub(&mut self, insn: u32);

    /// `mul Xdst Xlhs u17`
    fn l0_mul(&mut self, insn: u32);

    /// `div Xdst Xlhs u17`
    fn l0_div(&mut self, insn: u32);

    /// `rem Xdst Xlhs u17`
    fn l0_rem(&mut self, insn: u32);

    /// `divs Xdst Xlhs i17`
    fn l0_divs(&mut self, insn: u32);

    /// `rems Xdst Xlhs i17`
    fn l0_rems(&mut self, insn: u32);

    /// `ldr Xdst i22`
    fn l0_ldr(&mut self, insn: u32);

    /// `str i22 Xsrc`
    fn l0_str(&mut self, insn: u32);

    /// `mov Xdst u22`
    fn l0_mov(&mut self, insn: u32);

    /// `movs Xdst i22`
    fn l0_movs(&mut self, insn: u32);

    /// `branch i27`
    fn l0_branch(&mut self, insn: u32);

    /// `branch.l i27`
    fn l0_branch_l(&mut self, insn: u32);

    /// `branch.ld i27`
    fn l0_branch_ld(&mut self, insn: u32);

    /// `branch.l.ld i27`
    fn l0_branch_l_ld(&mut self, insn: u32);

    /// `branch.eq i22 Xcond`
    fn l0_branch_eq(&mut self, insn: u32);

    /// `branch.ne i22 Xcond`
    fn l0_branch_ne(&mut self, insn: u32);

    /// `branch.lt i22 Xcond`
    fn l0_branch_lt(&mut self, insn: u32);

    /// `branch.gt i22 Xcond`
    fn l0_branch_gt(&mut self, insn: u32);

    /// `branch.le i22 Xcond`
    fn l0_branch_le(&mut self, insn: u32);

    /// `branch.ge i22 Xcond`
    fn l0_branch_ge(&mut self, insn: u32);

    /// `shl Xdst Xlhs u11`
    fn l1_shl(&mut self, insn: u32);

    /// `shr Xdst Xlhs u11`
    fn l1_shr(&mut self, insn: u32);

    /// `shrs Xdst Xlhs u11`
    fn l1_shrs(&mut self, insn: u32);

    /// `ldr Xdst Xsrc i11`
    fn l1_ldr(&mut self, insn: u32);

    /// `ldrb Xdst Xsrc i11`
    fn l1_ldrb(&mut self, insn: u32);

    /// `ldrh Xdst Xsrc i11`
    fn l1_ldrh(&mut self, insn: u32);

    /// `ldrw Xdst Xsrc i11`
    fn l1_ldrw(&mut self, insn: u32);

    /// `str Xdst Xsrc i11`
    fn l1_str(&mut self, insn: u32);

    /// `strb Xdst Xsrc i11`
    fn l1_strb(&mut self, insn: u32);

    /// `strh Xdst Xsrc i11`
    fn l1_strh(&mut self, insn: u32);

    /// `strw Xdst Xsrc i11`
    fn l1_strw(&mut self, insn: u32);

    /// `int u16`
    fn l1_int(&mut self, insn: u32);

    /// `ncall u21`
    fn l1_ncall(&mut self, insn: u32);

    /// `vcall u21`
    fn l1_vcall(&mut self, insn: u32);

    /// `add Xdst Xlhs Xrhs`
    fn l2_add(&mut self, insn: u32);

    /// `sub Xdst Xlhs Xrhs`
    fn l2_sub(&mut self, insn: u32);

    /// `mul Xdst Xlhs Xrhs`
    fn l2_mul(&mut self, insn: u32);

    /// `div Xdst Xlhs Xrhs`
    fn l2_div(&mut self, insn: u32);

    /// `rem Xdst Xlhs Xrhs`
    fn l2_rem(&mut self, insn: u32);

    /// `divs Xdst Xlhs Xrhs`
    fn l2_divs(&mut self, insn: u32);

    /// `rems Xdst Xlhs Xrhs`
    fn l2_rems(&mut self, insn: u32);

    /// `addf Xdst Xlhs Xrhs`
    fn l2_addf(&mut self, insn: u32);

    /// `subf Xdst Xlhs Xrhs`
    fn l2_subf(&mut self, insn: u32);

    /// `mulf Xdst Xlhs Xrhs`
    fn l2_mulf(&mut self, insn: u32);

    /// `divf Xdst Xlhs Xrhs`
    fn l2_divf(&mut self, insn: u32);

    /// `remf Xdst Xlhs Xrhs`
    fn l2_remf(&mut self, insn: u32);

    /// `and Xdst Xlhs Xrhs`
    fn l2_and(&mut self, insn: u32);

    /// `or Xdst Xlhs Xrhs`
    fn l2_or(&mut self, insn: u32);

    /// `xor Xdst Xlhs Xrhs`
    fn l2_xor(&mut self, insn: u32);

    /// `shl Xdst Xlhs Xrhs`
    fn l2_shl(&mut self, insn: u32);

    /// `shr Xdst Xlhs Xrhs`
    fn l2_shr(&mut self, insn: u32);

    /// `shrs Xdst Xlhs Xrhs`
    fn l2_shrs(&mut self, insn: u32);

    /// `cmp Xdst Xlhs Xrhs`
    fn l2_cmp(&mut self, insn: u32);

    /// `cmps Xdst Xlhs Xrhs`
    fn l2_cmps(&mut self, insn: u32);

    /// `cmpf Xdst Xlhs Xrhs`
    fn l2_cmpf(&mut self, insn: u32);

    /// `not Xdst Xsrc`
    fn l3_not(&mut self, insn: u32);

    /// `mov Xdst Xsrc`
    fn l3_mov(&mut self, insn: u32);

    /// `fti Xdst Xsrc`
    fn l3_fti(&mut self, insn: u32);

    /// `itf Xdst Xsrc`
    fn l3_itf(&mut self, insn: u32);

    /// `branch Xdst`
    fn l4_branch(&mut self, insn: u32);

    /// `branch.l Xdst`
    fn l4_branch_l(&mut self, insn: u32);

    /// `branch.ld Xsrc`
    fn l4_branch_ld(&mut self, insn: u32);

    /// `branch.l.ld Xsrc`
    fn l4_branch_l_ld(&mut self, insn: u32);

    /// `branch.bo Xdst`
    fn l4_branch_bo(&mut self, insn: u32);

    /// `branch.l.bo Xdst`
    fn l4_branch_l_bo(&mut self, insn: u32);

    /// `branch.ld.bo Xsrc`
    fn l4_branch_ld_bo(&mut self, insn: u32);

    /// `branch.bo.ld Xsrc`
    fn l4_branch_bo_ld(&mut self, insn: u32);

    /// `branch.bo.ld.bo Xsrc`
    fn l4_branch_bo_ld_bo(&mut self, insn: u32);

    /// `branch.l.ld.bo Xsrc`
    fn l4_branch_l_ld_bo(&mut self, insn: u32);

    /// `branch.l.bo.ld Xsrc`
    fn l4_branch_l_bo_ld(&mut self, insn: u32);

    /// `branch.l.bo.ld.bo Xsrc`
    fn l4_branch_l_bo_ld_bo(&mut self, insn: u32);

    /// `ncall Xid`
    fn l4_ncall(&mut self, insn: u32);

    /// `vcall Xid`
    fn l4_vcall(&mut self, insn: u32);

    /// `ldbo Xdst`
    fn l4_ldbo(&mut self, insn: u32);

    /// `ldpc Xdst`
    fn l4_ldpc(&mut self, insn: u32);

    /// `nop`
    fn l5_nop(&mut self, insn: u32);

    /// `halt`
    fn l5_halt(&mut self, insn: u32);

    fn unknown(&mut self, insn: u32);

    fn process(&mut self, insn: u32) {
        match insn {
            L0_ADD..=END_L0_ADD => self.l0_add(insn),
            L0_SUB..=END_L0_SUB => self.l0_sub(insn),
            L0_MUL..=END_L0_MUL => self.l0_mul(insn),
            L0_DIV..=END_L0_DIV => self.l0_div(insn),
            L0_REM..=END_L0_REM => self.l0_rem(insn),
            L0_DIVS..=END_L0_DIVS => self.l0_divs(insn),
            L0_REMS..=END_L0_REMS => self.l0_rems(insn),
            L0_LDR..=END_L0_LDR => self.l0_ldr(insn),
            L0_STR..=END_L0_STR => self.l0_str(insn),
            L0_MOV..=END_L0_MOV => self.l0_mov(insn),
            L0_MOVS..=END_L0_MOVS => self.l0_movs(insn),
            L0_BRANCH..=END_L0_BRANCH => self.l0_branch(insn),
            L0_BRANCH_L..=END_L0_BRANCH_L => self.l0_branch_l(insn),
            L0_BRANCH_LD..=END_L0_BRANCH_LD => self.l0_branch_ld(insn),
            L0_BRANCH_L_LD..=END_L0_BRANCH_L_LD => self.l0_branch_l_ld(insn),
            L0_BRANCH_EQ..=END_L0_BRANCH_EQ => self.l0_branch_eq(insn),
            L0_BRANCH_NE..=END_L0_BRANCH_NE => self.l0_branch_ne(insn),
            L0_BRANCH_LT..=END_L0_BRANCH_LT => self.l0_branch_lt(insn),
            L0_BRANCH_GT..=END_L0_BRANCH_GT => self.l0_branch_gt(insn),
            L0_BRANCH_LE..=END_L0_BRANCH_LE => self.l0_branch_le(insn),
            L0_BRANCH_GE..=END_L0_BRANCH_GE => self.l0_branch_ge(insn),
            L1_SHL..=END_L1_SHL => self.l1_shl(insn),
            L1_SHR..=END_L1_SHR => self.l1_shr(insn),
            L1_SHRS..=END_L1_SHRS => self.l1_shrs(insn),
            L1_LDR..=END_L1_LDR => self.l1_ldr(insn),
            L1_LDRB..=END_L1_LDRB => self.l1_ldrb(insn),
            L1_LDRH..=END_L1_LDRH => self.l1_ldrh(insn),
            L1_LDRW..=END_L1_LDRW => self.l1_ldrw(insn),
            L1_STR..=END_L1_STR => self.l1_str(insn),
            L1_STRB..=END_L1_STRB => self.l1_strb(insn),
            L1_STRH..=END_L1_STRH => self.l1_strh(insn),
            L1_STRW..=END_L1_STRW => self.l1_strw(insn),
            L1_INT..=END_L1_INT => self.l1_int(insn),
            L1_NCALL..=END_L1_NCALL => self.l1_ncall(insn),
            L1_VCALL..=END_L1_VCALL => self.l1_vcall(insn),
            L2_ADD..=END_L2_ADD => self.l2_add(insn),
            L2_SUB..=END_L2_SUB => self.l2_sub(insn),
            L2_MUL..=END_L2_MUL => self.l2_mul(insn),
            L2_DIV..=END_L2_DIV => self.l2_div(insn),
            L2_REM..=END_L2_REM => self.l2_rem(insn),
            L2_DIVS..=END_L2_DIVS => self.l2_divs(insn),
            L2_REMS..=END_L2_REMS => self.l2_rems(insn),
            L2_ADDF..=END_L2_ADDF => self.l2_addf(insn),
            L2_SUBF..=END_L2_SUBF => self.l2_subf(insn),
            L2_MULF..=END_L2_MULF => self.l2_mulf(insn),
            L2_DIVF..=END_L2_DIVF => self.l2_divf(insn),
            L2_REMF..=END_L2_REMF => self.l2_remf(insn),
            L2_AND..=END_L2_AND => self.l2_and(insn),
            L2_OR..=END_L2_OR => self.l2_or(insn),
            L2_XOR..=END_L2_XOR => self.l2_xor(insn),
            L2_SHL..=END_L2_SHL => self.l2_shl(insn),
            L2_SHR..=END_L2_SHR => self.l2_shr(insn),
            L2_SHRS..=END_L2_SHRS => self.l2_shrs(insn),
            L2_CMP..=END_L2_CMP => self.l2_cmp(insn),
            L2_CMPS..=END_L2_CMPS => self.l2_cmps(insn),
            L2_CMPF..=END_L2_CMPF => self.l2_cmpf(insn),
            L3_NOT..=END_L3_NOT => self.l3_not(insn),
            L3_MOV..=END_L3_MOV => self.l3_mov(insn),
            L3_FTI..=END_L3_FTI => self.l3_fti(insn),
            L3_ITF..=END_L3_ITF => self.l3_itf(insn),
            L4_BRANCH..=END_L4_BRANCH => self.l4_branch(insn),
            L4_BRANCH_L..=END_L4_BRANCH_L => self.l4_branch_l(insn),
            L4_BRANCH_LD..=END_L4_BRANCH_LD => self.l4_branch_ld(insn),
            L4_BRANCH_L_LD..=END_L4_BRANCH_L_LD => self.l4_branch_l_ld(insn),
            L4_BRANCH_BO..=END_L4_BRANCH_BO => self.l4_branch_bo(insn),
            L4_BRANCH_L_BO..=END_L4_BRANCH_L_BO => self.l4_branch_l_bo(insn),
            L4_BRANCH_LD_BO..=END_L4_BRANCH_LD_BO => self.l4_branch_ld_bo(insn),
            L4_BRANCH_BO_LD..=END_L4_BRANCH_BO_LD => self.l4_branch_bo_ld(insn),
            L4_BRANCH_BO_LD_BO..=END_L4_BRANCH_BO_LD_BO => self.l4_branch_bo_ld_bo(insn),
            L4_BRANCH_L_LD_BO..=END_L4_BRANCH_L_LD_BO => self.l4_branch_l_ld_bo(insn),
            L4_BRANCH_L_BO_LD..=END_L4_BRANCH_L_BO_LD => self.l4_branch_l_bo_ld(insn),
            L4_BRANCH_L_BO_LD_BO..=END_L4_BRANCH_L_BO_LD_BO => self.l4_branch_l_bo_ld_bo(insn),
            L4_NCALL..=END_L4_NCALL => self.l4_ncall(insn),
            L4_VCALL..=END_L4_VCALL => self.l4_vcall(insn),
            L4_LDBO..=END_L4_LDBO => self.l4_ldbo(insn),
            L4_LDPC..=END_L4_LDPC => self.l4_ldpc(insn),
            L5_NOP..=END_L5_NOP => self.l5_nop(insn),
            L5_HALT..=END_L5_HALT => self.l5_halt(insn),
            _ => self.unknown(insn),
        }
    }
}
