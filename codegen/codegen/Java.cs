using System.Globalization;
using System.Text;

namespace urban_codegen.codegen;

public class Java : Codegen
{
    public void Run(Instructions instructions)
    {
        Directory.CreateDirectory("gen/java");
        OpCodes(instructions);
        Instructable(instructions);
    }

    private static void OpCodes(Instructions instructions)
    {
        var opcodesFile = File.Create("gen/java/OpCodes.java");
        var opcodes = new StreamWriter(opcodesFile);
        opcodes.WriteLine($$"""
            // This file is automatically generated.
            // It is not intended for manual editing.

            /**
             * This class contains opcode constants for ISA version {@code {{instructions.Version}}}.
             */
            public class OpCodes {
            """);
        var layerId = 0;
        foreach (var layer in instructions.Layers)
        {
            foreach (var instruction in layer.Instructions)
            {
                var name = instruction.Name.ToUpper().Replace('.', '_');
                opcodes.WriteLine("    /**");
                opcodes.Write($"     * {{@code {instruction.Name}");
                foreach (var component in instruction.Components)
                {
                    opcodes.Write($" {component.DocString}");
                }

                opcodes.WriteLine("}");
                opcodes.WriteLine("     */");
                opcodes.Write($"    public static final int L{layerId}_{name} = 0b");
                var startBuilder = new StringBuilder();
                startBuilder.Append(string.Concat(Enumerable.Repeat('1', (int)layer.PrefixBits)));
                if (layer.PrefixBits > 0)
                {
                    startBuilder.Append('_');
                }

                var index = Convert.ToString(instruction.Index, 2);
                startBuilder.Append(string.Concat(Enumerable.Repeat('0', (int)layer.Bits - index.Length)));
                startBuilder.Append(index);
                if (instruction.LostBits > 0)
                {
                    startBuilder.Append('_');
                    startBuilder.Append(string.Concat(Enumerable.Repeat('0', (int)instruction.LostBits)));
                }

                var start = startBuilder.ToString();
                opcodes.Write(start);
                foreach (var component in instruction.Components.Reverse<IInstructionComponent>())
                {
                    opcodes.Write('_');
                    opcodes.Write(string.Concat(Enumerable.Repeat('0', (int)component.Bits)));
                }

                opcodes.WriteLine(";");
                opcodes.Write($"    public static final int END_L{layerId}_{name} = 0b");
                opcodes.Write(start);
                foreach (var component in instruction.Components.Reverse<IInstructionComponent>())
                {
                    opcodes.Write('_');
                    opcodes.Write(string.Concat(Enumerable.Repeat('1', (int)component.Bits)));
                }

                opcodes.WriteLine(";");
            }

            layerId++;
        }

        opcodes.WriteLine("}");
        opcodes.Flush();
        opcodesFile.Close();
    }

    private static void Instructable(Instructions instructions)
    {
        var file = File.Create("gen/java/Instructable.java");
        var fileStream = new StreamWriter(file);
        fileStream.WriteLine($$"""
// This file is automatically generated.
// It is not intended for manual editing.

/**
 * This interface contains builder methods for each instruction in ISA version {@code {{instructions.Version}}}.
 */
@SuppressWarnings("unchecked")
public interface Instructable<S extends Instructable<S>> {
    void addInstruction(Instruction instruction);
""");
        var layerId = 0;
        foreach (var layer in instructions.Layers)
        {
            foreach (var instruction in layer.Instructions)
            {
                fileStream.WriteLine();
                var constName = instruction.Name.ToUpper().Replace('.', '_');
                var parts = instruction.Name.Split('.');
                var nameBuilder = new StringBuilder();
                nameBuilder.Append(parts[0]);
                var textInfo = new CultureInfo("en-US").TextInfo;
                for (var i = 1; i < parts.Length; i++)
                {
                    nameBuilder.Append(textInfo.ToTitleCase(parts[i]));
                }

                var name = nameBuilder.ToString();
                fileStream.WriteLine("    /**");
                fileStream.Write($"     * {{@code {instruction.Name}");
                foreach (var component in instruction.Components)
                {
                    fileStream.Write($" {component.DocString}");
                }

                fileStream.WriteLine("}");
                fileStream.WriteLine("     */");
                switch (name)
                {
                    case "int":
                        fileStream.Write("    default S interrupt(");
                        break;
                    default:
                        fileStream.Write($"    default S {name}(");
                        break;
                }

                var j = 0;
                foreach (var component in instruction.Components)
                {
                    if (j != 0)
                    {
                        fileStream.Write(", ");
                    }

                    switch (component)
                    {
                        case Register r:
                            fileStream.Write($"Register {r.Name}");
                            break;
                        case UnsignedImmediate u:
                            fileStream.Write($"long {u.Name}");
                            break;
                        case SignedImmediate i:
                            fileStream.Write($"long {i.Name}");
                            break;
                    }

                    j++;
                }

                fileStream.WriteLine(") {");
                if (instruction.Components.Count == 0)
                {
                    fileStream.WriteLine(
                        $"        addInstruction(new RawInstruction(OpCodes.L{layerId}_{constName}));");
                }
                else
                {
                    fileStream.WriteLine($"        var opcode = OpCodes.L{layerId}_{constName};");
                    var k = 0u;
                    foreach (var component in instruction.Components)
                    {
                        fileStream.Write("        opcode |= ");
                        var pattern = (1u << (int)component.Bits) - 1;
                        switch (component)
                        {
                            case Register r:
                                fileStream.Write(k == 0
                                    ? $"{r.Name}.num() & 0x{pattern:x}"
                                    : $"({r.Name}.num() & 0x{pattern:x}) << {k}");
                                break;
                            default:
                                fileStream.Write(k == 0
                                    ? $"{component.Name} & 0x{pattern:x}"
                                    : $"({component.Name} & 0x{pattern:x}) << {k}");
                                break;
                        }

                        fileStream.WriteLine(";");
                        k += component.Bits;
                    }

                    fileStream.WriteLine("        addInstruction(new RawInstruction(opcode));");
                }

                fileStream.WriteLine("""
        return (S) this;
    }
""");
            }

            layerId++;
        }

        fileStream.WriteLine("}");
        fileStream.Flush();
        file.Close();
    }
}