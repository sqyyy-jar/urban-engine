using System.Text;

namespace urban_codegen.codegen;

public class Java : Codegen
{
    public void Run(Instructions instructions)
    {
        Directory.CreateDirectory("gen/java");
        OpCodes(instructions);
    }

    private static void OpCodes(Instructions instructions)
    {
        var opcodesFile = File.Create("gen/java/OpCodes.java");
        var opcodes = new StreamWriter(opcodesFile);
        opcodes.WriteLine($$"""
            // This file is automatically generated.
            // It is not intended for manual editing.

            /**
             * This module contains opcode constants for ISA version {@code {{instructions.Version}}}.
             */
            public class OpCodes {
            """);
        var layerId = 0;
        foreach (var layer in instructions.Layers)
        {
            foreach (var instruction in layer.Instructions)
            {
                var name = instruction.Name.ToUpper().Replace('.', '_');
                opcodes.WriteLine("    /**");
                opcodes.Write($"     * {{@code {instruction.Name}");
                foreach (var component in instruction.Components)
                {
                    opcodes.Write($" {component.DocString}");
                }

                opcodes.WriteLine("}");
                opcodes.WriteLine("     */");
                opcodes.Write($"    public static final int L{layerId}_{name} = 0b");
                var startBuilder = new StringBuilder();
                startBuilder.Append(string.Concat(Enumerable.Repeat('1', (int)layer.PrefixBits)));
                if (layer.PrefixBits > 0)
                {
                    startBuilder.Append('_');
                }

                var index = Convert.ToString(instruction.Index, 2);
                startBuilder.Append(string.Concat(Enumerable.Repeat('0', (int)layer.Bits - index.Length)));
                startBuilder.Append(index);
                if (instruction.LostBits > 0)
                {
                    startBuilder.Append('_');
                    startBuilder.Append(string.Concat(Enumerable.Repeat('0', (int)instruction.LostBits)));
                }

                var start = startBuilder.ToString();
                opcodes.Write(start);
                foreach (var component in instruction.Components)
                {
                    opcodes.Write('_');
                    opcodes.Write(string.Concat(Enumerable.Repeat('0', (int)component.Bits)));
                }

                opcodes.WriteLine(";");
                opcodes.Write($"    public static final int END_L{layerId}_{name} = 0b");
                opcodes.Write(start);
                foreach (var component in instruction.Components)
                {
                    opcodes.Write('_');
                    opcodes.Write(string.Concat(Enumerable.Repeat('1', (int)component.Bits)));
                }

                opcodes.WriteLine(";");
            }

            layerId++;
        }

        opcodes.WriteLine("}");
        opcodes.Flush();
        opcodesFile.Close();
    }
}