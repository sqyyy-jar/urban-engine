// This file is automatically generated.
// It is not intended for manual editing.

//! This module contains constants for all instructions
//!
//! ## Instruction
//!
//! ### Layer 1
//!
//! 0bXXXXX_000000000000000000000000000
//!
//! ### Layer 2
//!
//! 0b11111_XXXXXX_000000000000000000000
//!
//! `X` represents the id of the instruction in its layer

#![allow(clippy::unusual_byte_groupings)]

/// `add X0, X1, u17`
pub const INSN_ADD_IMMEDIATE: u32 = 0b00000_00000000000000000_00000_00000;
pub const ENDINSN_ADD_IMMEDIATE: u32 = 0b00000_11111111111111111_11111_11111;
/// `adds X0, X1, i17`
pub const INSN_ADDS_IMMEDIATE: u32 = 0b00001_00000000000000000_00000_00000;
pub const ENDINSN_ADDS_IMMEDIATE: u32 = 0b00001_11111111111111111_11111_11111;
/// `b i27`
pub const INSN_B_IMMEDIATE: u32 = 0b00010_000000000000000000000000000;
pub const ENDINSN_B_IMMEDIATE: u32 = 0b00010_111111111111111111111111111;
/// `b.eq X0, i22`
pub const INSN_B_EQ_IMMEDIATE: u32 = 0b00011_0000000000000000000000_00000;
pub const ENDINSN_B_EQ_IMMEDIATE: u32 = 0b00011_1111111111111111111111_11111;
/// `b.ge X0, i22`
pub const INSN_B_GE_IMMEDIATE: u32 = 0b00100_0000000000000000000000_00000;
pub const ENDINSN_B_GE_IMMEDIATE: u32 = 0b00100_1111111111111111111111_11111;
/// `b.gt X0, i22`
pub const INSN_B_GT_IMMEDIATE: u32 = 0b00101_0000000000000000000000_00000;
pub const ENDINSN_B_GT_IMMEDIATE: u32 = 0b00101_1111111111111111111111_11111;
/// `b.le X0, i22`
pub const INSN_B_LE_IMMEDIATE: u32 = 0b00110_0000000000000000000000_00000;
pub const ENDINSN_B_LE_IMMEDIATE: u32 = 0b00110_1111111111111111111111_11111;
/// `b.lt X0, i22`
pub const INSN_B_LT_IMMEDIATE: u32 = 0b00111_0000000000000000000000_00000;
pub const ENDINSN_B_LT_IMMEDIATE: u32 = 0b00111_1111111111111111111111_11111;
/// `b.ne X0, i22`
pub const INSN_B_NE_IMMEDIATE: u32 = 0b01000_0000000000000000000000_00000;
pub const ENDINSN_B_NE_IMMEDIATE: u32 = 0b01000_1111111111111111111111_11111;
/// `bl i27`
pub const INSN_BL_IMMEDIATE: u32 = 0b01001_000000000000000000000000000;
pub const ENDINSN_BL_IMMEDIATE: u32 = 0b01001_111111111111111111111111111;
/// `div X0, X1, u17`
pub const INSN_DIV_IMMEDIATE: u32 = 0b01010_00000000000000000_00000_00000;
pub const ENDINSN_DIV_IMMEDIATE: u32 = 0b01010_11111111111111111_11111_11111;
/// `divs X0, X1, i17`
pub const INSN_DIVS_IMMEDIATE: u32 = 0b01011_00000000000000000_00000_00000;
pub const ENDINSN_DIVS_IMMEDIATE: u32 = 0b01011_11111111111111111_11111_11111;
/// `ldr X0, i22`
pub const INSN_LDR_IMMEDIATE: u32 = 0b01100_0000000000000000000000_00000;
pub const ENDINSN_LDR_IMMEDIATE: u32 = 0b01100_1111111111111111111111_11111;
/// `mov X0, u22`
pub const INSN_MOV_IMMEDIATE: u32 = 0b01101_0000000000000000000000_00000;
pub const ENDINSN_MOV_IMMEDIATE: u32 = 0b01101_1111111111111111111111_11111;
/// `movs X0, i22`
pub const INSN_MOVS_IMMEDIATE: u32 = 0b01110_0000000000000000000000_00000;
pub const ENDINSN_MOVS_IMMEDIATE: u32 = 0b01110_1111111111111111111111_11111;
/// `mul X0, X1, u17`
pub const INSN_MUL_IMMEDIATE: u32 = 0b01111_00000000000000000_00000_00000;
pub const ENDINSN_MUL_IMMEDIATE: u32 = 0b01111_11111111111111111_11111_11111;
/// `muls X0, X1, i17`
pub const INSN_MULS_IMMEDIATE: u32 = 0b10000_00000000000000000_00000_00000;
pub const ENDINSN_MULS_IMMEDIATE: u32 = 0b10000_11111111111111111_11111_11111;
/// `str X0, i22`
pub const INSN_STR_IMMEDIATE: u32 = 0b10001_0000000000000000000000_00000;
pub const ENDINSN_STR_IMMEDIATE: u32 = 0b10001_1111111111111111111111_11111;
/// `sub X0, X1, u17`
pub const INSN_SUB_IMMEDIATE: u32 = 0b10010_00000000000000000_00000_00000;
pub const ENDINSN_SUB_IMMEDIATE: u32 = 0b10010_11111111111111111_11111_11111;
/// `subs X0, X1, i17`
pub const INSN_SUBS_IMMEDIATE: u32 = 0b10011_00000000000000000_00000_00000;
pub const ENDINSN_SUBS_IMMEDIATE: u32 = 0b10011_11111111111111111_11111_11111;
/// `add X0, X1, X2`
pub const INSN_ADD: u32 = 0b11111_000000_000000_00000_00000_00000;
pub const ENDINSN_ADD: u32 = 0b11111_000000_000000_11111_11111_11111;
/// `addf X0, X1, X2`
pub const INSN_ADDF: u32 = 0b11111_000001_000000_00000_00000_00000;
pub const ENDINSN_ADDF: u32 = 0b11111_000001_000000_11111_11111_11111;
/// `adds X0, X1, X2`
pub const INSN_ADDS: u32 = 0b11111_000010_000000_00000_00000_00000;
pub const ENDINSN_ADDS: u32 = 0b11111_000010_000000_11111_11111_11111;
/// `and X0, X1, X2`
pub const INSN_AND: u32 = 0b11111_000011_000000_00000_00000_00000;
pub const ENDINSN_AND: u32 = 0b11111_000011_000000_11111_11111_11111;
/// `br X0`
pub const INSN_BR: u32 = 0b11111_000100_0000000000000000_00000;
pub const ENDINSN_BR: u32 = 0b11111_000100_0000000000000000_11111;
/// `brl X0`
pub const INSN_BRL: u32 = 0b11111_000101_0000000000000000_00000;
pub const ENDINSN_BRL: u32 = 0b11111_000101_0000000000000000_11111;
/// `div X0, X1, X2`
pub const INSN_DIV: u32 = 0b11111_000110_000000_00000_00000_00000;
pub const ENDINSN_DIV: u32 = 0b11111_000110_000000_11111_11111_11111;
/// `divf X0, X1, X2`
pub const INSN_DIVF: u32 = 0b11111_000111_000000_00000_00000_00000;
pub const ENDINSN_DIVF: u32 = 0b11111_000111_000000_11111_11111_11111;
/// `divs X0, X1, X2`
pub const INSN_DIVS: u32 = 0b11111_001000_000000_00000_00000_00000;
pub const ENDINSN_DIVS: u32 = 0b11111_001000_000000_11111_11111_11111;
/// `halt`
pub const INSN_HALT: u32 = 0b11111_001001_000000000000000000000;
pub const ENDINSN_HALT: u32 = 0b11111_001001_000000000000000000000;
/// `interrupt u16`
pub const INSN_INTERRUPT_IMMEDIATE: u32 = 0b11111_001010_00000_0000000000000000;
pub const ENDINSN_INTERRUPT_IMMEDIATE: u32 = 0b11111_001010_00000_1111111111111111;
/// `ldr X0, X1`
pub const INSN_LDR: u32 = 0b11111_001011_00000000000_00000_00000;
pub const ENDINSN_LDR: u32 = 0b11111_001011_00000000000_11111_11111;
/// `mov X0, X1`
pub const INSN_MOV: u32 = 0b11111_001100_00000000000_00000_00000;
pub const ENDINSN_MOV: u32 = 0b11111_001100_00000000000_11111_11111;
/// `mul X0, X1, X2`
pub const INSN_MUL: u32 = 0b11111_001101_000000_00000_00000_00000;
pub const ENDINSN_MUL: u32 = 0b11111_001101_000000_11111_11111_11111;
/// `mulf X0, X1, X2`
pub const INSN_MULF: u32 = 0b11111_001110_000000_00000_00000_00000;
pub const ENDINSN_MULF: u32 = 0b11111_001110_000000_11111_11111_11111;
/// `muls X0, X1, X2`
pub const INSN_MULS: u32 = 0b11111_001111_000000_00000_00000_00000;
pub const ENDINSN_MULS: u32 = 0b11111_001111_000000_11111_11111_11111;
/// `nop`
pub const INSN_NOP: u32 = 0b11111_010000_000000000000000000000;
pub const ENDINSN_NOP: u32 = 0b11111_010000_000000000000000000000;
/// `not X0, X1`
pub const INSN_NOT: u32 = 0b11111_010001_00000000000_00000_00000;
pub const ENDINSN_NOT: u32 = 0b11111_010001_00000000000_11111_11111;
/// `or X0, X1, X2`
pub const INSN_OR: u32 = 0b11111_010010_000000_00000_00000_00000;
pub const ENDINSN_OR: u32 = 0b11111_010010_000000_11111_11111_11111;
/// `shl X0, X1, u7`
pub const INSN_SHL_IMMEDIATE: u32 = 0b11111_010011_0000_0000000_00000_00000;
pub const ENDINSN_SHL_IMMEDIATE: u32 = 0b11111_010011_0000_1111111_11111_11111;
/// `shr X0, X1, u7`
pub const INSN_SHR_IMMEDIATE: u32 = 0b11111_010100_0000_0000000_00000_00000;
pub const ENDINSN_SHR_IMMEDIATE: u32 = 0b11111_010100_0000_1111111_11111_11111;
/// `shrs X0, X1, u7`
pub const INSN_SHRS_IMMEDIATE: u32 = 0b11111_010101_0000_0000000_00000_00000;
pub const ENDINSN_SHRS_IMMEDIATE: u32 = 0b11111_010101_0000_1111111_11111_11111;
/// `str X0, X1`
pub const INSN_STR: u32 = 0b11111_010110_00000000000_00000_00000;
pub const ENDINSN_STR: u32 = 0b11111_010110_00000000000_11111_11111;
/// `sub X0, X1, X2`
pub const INSN_SUB: u32 = 0b11111_010111_000000_00000_00000_00000;
pub const ENDINSN_SUB: u32 = 0b11111_010111_000000_11111_11111_11111;
/// `subf X0, X1, X2`
pub const INSN_SUBF: u32 = 0b11111_011000_000000_00000_00000_00000;
pub const ENDINSN_SUBF: u32 = 0b11111_011000_000000_11111_11111_11111;
/// `subs X0, X1, X2`
pub const INSN_SUBS: u32 = 0b11111_011001_000000_00000_00000_00000;
pub const ENDINSN_SUBS: u32 = 0b11111_011001_000000_11111_11111_11111;
/// `xor X0, X1, X2`
pub const INSN_XOR: u32 = 0b11111_011010_000000_00000_00000_00000;
pub const ENDINSN_XOR: u32 = 0b11111_011010_000000_11111_11111_11111;
